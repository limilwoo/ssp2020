import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Collections;

class BusInfo implements Comparable<BusInfo> 
{
    public String Timestamp;
    public String BusNo;
    public String Distance;
    public BusInfo(String timestamp, String line) {
        String[] split = line.split(",");
        Timestamp =timestamp;
        BusNo = split[0];
        Distance = split[1];
    }
    @Override
    public String toString() {
        return "BusInfo [Timestamp=" + Timestamp + ", BusNo=" + BusNo + ", Distance="
                + Distance + "]";
    }
    
    @Override
    public int compareTo(BusInfo bisinfo) {
        if ( Integer.parseInt( this.Distance) < Integer.parseInt(bisinfo.Distance)){
            return -1;
        } else if ( Integer.parseInt( this.Distance)    >  Integer.parseInt(bisinfo.Distance)) {
            return 1;
        }
        return 0;
    }


    
}

		
public class bis01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		FileWriter fw = null ;
		BufferedWriter bw = null;

		List<BusInfo> businfolist =new ArrayList<>();
		 List<BusInfo> businfolistSorted =new ArrayList<>();
        try{
            //파일 객체 생성
            File file = new File(".\\LOCATION.txt");
            File stationfile = new File(".\\STATION.txt");
            File outfile = new File(".\\PREPOST.txt");
            File stationoutfile = new File(".\\ARRIVAL.txt");
            

            //입력 스트림 생성
            FileReader filereader = new FileReader(file);
            FileReader filereaderStation = new FileReader(stationfile);
            //입력 버퍼 생성
            BufferedReader bufReader = new BufferedReader(filereader);
            BufferedReader bufReaderStation = new BufferedReader(filereaderStation);
            
            FileWriter filewriter = new FileWriter( outfile );
            BufferedWriter bufWriter = new BufferedWriter(filewriter);
            
            FileWriter filewriterStation = new FileWriter( stationoutfile );
            BufferedWriter bufWriterStation = new BufferedWriter(filewriterStation);
            
            String line = "";
            String preline = "";
            while((line = bufReader.readLine()) != null){
  
                // Create new Employee object        
            	if ( line.contentEquals("PRINT"))
            	{
            		
            		String[] split = preline.split("#");
            		
              	    for ( int i = 0 ; i < split.length -1 ; i++ )
              	    {
              	    	System.out.println("i " + i );
              	    	BusInfo bisinfo = new BusInfo(split[0], split[i+1]);
              	    	businfolist.add(bisinfo);
              	    	businfolistSorted.add(bisinfo);
              	    	
              	    }
            	/*
            		BusInfo bisinfo = new BusInfo(split[0], split[1]);
            		businfolist.add(bisinfo);
            		businfolistSorted.add(bisinfo);
            		BusInfo bisinfo1 = new BusInfo(split[0], split[2]);
            		businfolist.add(bisinfo1);
            		businfolistSorted.add(bisinfo1);
            		BusInfo bisinfo2 = new BusInfo(split[0], split[3]);
            		businfolist.add(bisinfo2);   
            		businfolistSorted.add(bisinfo2);   
            		*/
            	}
            	else
            		preline = line;    	
            }      
                      
            Collections.sort(businfolistSorted);
            
            for (BusInfo s : businfolistSorted) {
                System.out.println(s.toString());
            }
            
            for(BusInfo businfo : businfolist)
            {
         	  // System.out.println( s.toString());         	   
         	  
              for ( int i =0 ; i < businfolistSorted.size() ; i++ )
              {
                 if ( businfo.BusNo.equals( businfolistSorted.get(i).BusNo) == true )
                 {
                      if ( i == 0 )
                      {
                        int disgap = (Integer.parseInt(businfolistSorted.get(1).Distance) - Integer.parseInt(businfolistSorted.get(0).Distance));

                        bufWriter.write(  businfo.Timestamp+"#" + businfo.BusNo +"#" +businfolistSorted.get(1).BusNo+","+ String.format("%05d", disgap) +"#NOBUS,00000"   );
                        bufWriter.newLine();
                        System.out.println(  "index : " + i +"  "+ businfo.Timestamp+"#" + businfo.BusNo +"#" +businfolistSorted.get(1).BusNo+","+ String.format("%05d", disgap) +"#NOBUS,00000"   );
                      }
                      else if ( i == businfolistSorted.size() -1 )
                      {
                        int disgap = (Integer.parseInt(businfolistSorted.get(i).Distance) - Integer.parseInt(businfolistSorted.get(i-1).Distance));
                        bufWriter.write( businfo.Timestamp+"#" + businfo.BusNo + "#NOBUS,00000#"   + businfolistSorted.get(i-1).BusNo+ ","+ String.format("%05d", disgap) );
                        bufWriter.flush(); 				
                        System.out.println( "index : " + i  +"  " + businfo.Timestamp+"#" + businfo.BusNo + "#NOBUS,00000#"   + businfolistSorted.get(i-1).BusNo+ ","+ String.format("%05d", disgap) );
                      }
                      else
                      {
                        int aftergap = (Integer.parseInt(businfolistSorted.get(i+1).Distance) - Integer.parseInt(businfolistSorted.get(i).Distance));
                        int forgap = (Integer.parseInt(businfolistSorted.get(i).Distance) - Integer.parseInt(businfolistSorted.get(i-1).Distance));
                        bufWriter.write( businfo.Timestamp+"#" + businfo.BusNo +"#" +
                            businfolistSorted.get(i+1).BusNo + ","+ String.format("%05d", aftergap) +"#" +
                            businfolistSorted.get(i-1).BusNo + "," + String.format("%05d", forgap) );
                        bufWriter.newLine();
                        System.out.println( "index : " + i  +"  "+ businfo.Timestamp+"#" + businfo.BusNo +"#" +
                            businfolistSorted.get(i+1).BusNo + ","+ String.format("%05d", forgap) +"#" +
                            businfolistSorted.get(i-1).BusNo + "," + String.format("%05d", forgap) );
                      }
                   }  
               }         	   
            }
            
            // station file 처리
            String linestation ="";
            while((linestation = bufReaderStation.readLine()) != null)
            {
            	String[] split = linestation.split("#");
         		 //System.out.println("Station Read : " + split[0] + split[1] );
        	                	 
                  if ( split[1].contentEquals("00000") == true )
                  {      
                    bufWriterStation.write(businfolistSorted.get(0).Timestamp +"#"+ split[0]+ "#NOBUS,00000" );
                    bufWriterStation.newLine();
                     System.out.println(businfolistSorted.get(0).Timestamp +"#"+ split[0]+ "#NOBUS,00000" );
                  }
                  else
                  {
                      boolean found = false;
                        // sort 한 현재 위치중 정류장 기반으로 검색
                      for ( int i =0 ; i < businfolistSorted.size() ; i++ ) 				  
                      {
                         int stationloc = Integer.parseInt(split[1]);
                         int vehicleloc = Integer.parseInt(businfolistSorted.get(i).Distance);

                         if ( stationloc < vehicleloc)
                         {
                           int gap = ( stationloc- Integer.parseInt(businfolistSorted.get(i-1).Distance));
                           bufWriterStation.write(businfolistSorted.get(0).Timestamp  +"#"+split[0]+ "#" + businfolistSorted.get(i-1).BusNo +"," + String.format("%05d", gap) );
                           bufWriterStation.newLine();
                           System.out.println(businfolistSorted.get(0).Timestamp  +"#"+split[0]+ "#" + businfolistSorted.get(i-1).BusNo +"," + String.format("%05d", gap) );
                           found = true;
                           break;
                         }
                        //else
                          // System.out.println ( "stationloc  " + stationloc + "vehicleloc  " + vehicleloc);
                      }

                      if ( found == false )
                      {
                         int stationloc = Integer.parseInt(split[1]);
                        int lastbusIndex = businfolistSorted.size() -1 ;
                        int gap =  stationloc- Integer.parseInt(businfolistSorted.get(lastbusIndex).Distance);
                         bufWriterStation.write(businfolistSorted.get(0).Timestamp  +"#"+split[0]+ "#" + businfolistSorted.get(lastbusIndex).BusNo +"," + String.format("%05d", gap) );
                         bufWriterStation.newLine();
                         System.out.println(businfolistSorted.get(0).Timestamp  +"#"+split[0]+ "#" + businfolistSorted.get(lastbusIndex).BusNo +"," + String.format("%05d", gap) );

                      }
                  }   
            }           
            
            //.readLine()은 끝에 개행문자를 읽지 않는다.            
            bufReader.close();
            bufReaderStation.close();
            bufWriter.close();
            bufWriterStation.close();
        }catch (FileNotFoundException e) {
            // TODO: handle exception
        }catch(IOException e){
            System.out.println(e);
        }
    
	}

}
